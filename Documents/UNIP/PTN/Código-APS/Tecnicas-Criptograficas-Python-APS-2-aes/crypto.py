# Técnicas Criptográficas - Advanced Encryption Standard
byte_list = {
'0':['C6', '37', '87', '47', 'DF', '46', ' 6', 'AC', 'F3', 'E0', '86', '42', '1F', '8D', '4A', '97'],
'1':['5C', 'D8', '6C', '27', '5F', '65', '84', 'FF', '2A', 'BD', 'DA', ' A', '39', 'BA', 'D7', 'FC'],
'2':['8B', '2F', 'C9', '92', '93', ' 3', '8F', '3C', 'B3', 'AA', 'AE', 'EF', 'E7', '7D', 'E3', 'A1'],
'3':['B0', '8C', 'C2', 'CC', '71', '99', 'A0', '59', '80', 'D1', 'F8', 'DE', '4E', '82', 'DB', 'A7'],
'4':['60', 'C8', '32', '51', '41', '16', '55', 'FA', 'D5', '43', '9D', 'CB', '62', 'CE', ' 2', 'B8'],
'5':['C5', 'ED', 'F0', '2E', 'F2', '3F', 'EB', '45', '56', '4C', '1B', '63', '54', '34', '75', ' C'],
'6':['FD', ' E', '5A', '4F', 'C4', '24', 'C3', 'A8', 'A4', '6F', 'D0', ' 7', 'F5', '33', ' 9', '7A'],
'7':['E5', 'CA', 'F4', ' 8', 'D9', '29', '73', 'AF', '3B', '9B', '5D', 'E2', 'F1', ' F', 'CF', 'DD'],
'8':['2C', '30', 'C1', '3E', ' 5', '89', 'B4', '81', 'BC', '8A', '17', '23', 'B6', '25', '61', 'C7'],
'9':['F6', 'E8', ' 4', '3D', 'D2', '52', 'F9', '78', '94', '1E', '7B', 'B1', '1D', '15', '40', '4D'],
'a':['FE', 'D3', '53', '50', '64', '90', 'B2', '35', 'DC', 'CD', '3A', 'D6', 'E9', 'A9', 'BE', '67'],
'b':['8E', '7C', '83', '26', '28', 'AD', '14', '6A', '36', '95', 'BF', '5E', 'A6', '57', '1A', '70'],
'c':['5B', '77', 'A2', '12', '31', '9A', 'BB', '9C', '7E', '2D', 'B7', ' 1', '44', '2B', '48', '58'],
'd':['F7', '13', 'AB', '96', '74', 'C0', '9F', '10', 'E6', 'A3', '85', '6B', '98', 'EC', '21', '19'],
'e':['EE', '7F', '79', 'E1', '66', '6D', '18', 'B9', '49', '11', '88', '6E', '1C', 'A5', '72', ' D'],
'f':['38', 'EA', '68', '20', ' B', '9E', 'D4', '76', 'E4', '69', '22', ' 0', 'FB', 'B5', '4B', '91']}

Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

message = 'Man request adapted spirits set pressed. Up to denoting subjects sensible feelings it indulged directly.'

round_key = (
  0x63, 0xa4, 0x12, 0x14,
  0x41, 0xf3, 0x27, 0x12,
  0x8C, 0xA1, 0x89, 0x0D,
  0xE6, 0x42, 0x68, 0x41,
)


def chunks(lista, n):
    inicio = 0
    for i in range(n):
        final = inicio + len(lista[i::n])
        yield lista[inicio:final]
        inicio = final


def textToMatrix(text):
  matrix_group = [] 
  matrix_counter = 0
  hex_text = (text.encode(encoding="utf-8")).hex()
  hex_start = 0
  hex_end = 0

  if len(text) > 128:
    raise Exception('Message range exceed the 128 char limit')

  while hex_end < len(hex_text):
    matrix = []
    hex_start = 32 * matrix_counter
    hex_end = 32 * (matrix_counter + 1)
    hex_piece = hex_text[hex_start:hex_end]
    
    for i in range(16):
      hex_char = hex_piece[2 * i: 2 * (i + 1)]
      matrix.append(hex_char or '00')

    matrix_counter += 1
    matrix_group.append(matrix)


  return matrix_group



def addRoundKey(group, key):
  matrix_group = []
  for matrix in group:
    matrix_key = []
    for i in range(16):
      matrix_key.append(int(matrix[i], base=16) ^ key[i])
      
    matrix_group.append(matrix_key)
    

  return matrix_group



def substituteBytes(matrix_group):
  matrix_sub = []

  for matrix_rows in range(0,7): 

    for matrix_columns in range(0,16):
      y = str(matrix_group[matrix_rows][matrix_columns][0])

      for b_rows in byte_list:

        if y == b_rows:

          for b_columns in range(0,16):
            x = matrix_group[matrix_rows][matrix_columns][1]

            if x == 'f':
              x = '15'

            elif x == 'e':
              x = '14'

            elif x == 'd':
              x = '13'

            elif x == 'c':
              x = '12'

            elif x == 'b':
              x = '11'

            elif x == 'a':
              x = '10'

            if int(x) == b_columns:

              matrix_sub.append(byte_list[b_rows][b_columns])
              

              break
  matrix_sub = list(chunks(matrix_sub, len(matrix_group)))

  return matrix_sub


def shiftRows():
  pass

def mixColumns():
  pass

def crypt():
  pass

def decrypt():
  pass

matrix_group = textToMatrix(message)
matrix_group_key = addRoundKey(matrix_group, round_key)


